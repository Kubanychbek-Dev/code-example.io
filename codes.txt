

await do instanceof var
// break else let void
// case export new while
// catch extends return with
// class finally static yield
// const for super protected
// continue function switch fetch
// debugger if this async
// default import throw
// delete in try typeof





function task_10() {
  // Задание 10: Игра "Угадай число". Предложить пользователю загадать число от 0 до 100 и отгадать
  // его следующим способом: каждую итерацию цикла делите диапазон чисел пополам, записываете
  // результат в N и спрашиваете у пользователя "Ваше число > N, < N или == N?". В зависимости
  // от того, что указал пользователь, уменьшаете диапазон. Начальный диапазон от 0 до 100,
  // поделили пополаи и получили 50. Если пользователь указал, что его число > 50, то изменили
  // диапазон на от 51 до 100. И так до тех пор, пока пользователь не выберет == N.

  alert(
    'Задание 10: Игра "Угадай число". Предложить пользователю загадать число от 0 до 100 и отгадать его следующим способом: каждую итерацию цикла делите диапазон чисел пополам, записываете результат в N и спрашиваете у пользователя "Ваше число > N, < N или == N?". В зависимости от того, что указал пользователь, уменьшаете диапазон. Начальный диапазон от 0 до 100, поделили пополаи и получили 50. Если пользователь указал, что его число > 50, то изменили диапазон на от 51 до 100. И так до те пор, пока пользователь не выберет == N.'
  );
  alert(
    "Что ж, давайте поиграем! Только честно и без мухлежа! Сейчас я вам предложу ввести целое число в диапазоне от 0 до 100. Потом я логическими вопросами буду отсекать ненужные числа и докажу, что угадаю ваше загаданное число не более чем за 7 попыток! Прошу не лукавить и не мухлевать!"
  );
  let N = 0;
  do {
    N = Math.trunc(
      +prompt("Введите целое число в диапазоне от 0 до 100 включительно: ")
    );
  } while (N < 0 || N > 100);
  alert(`Итак, будем играться с числом ${N}.`);

  let counter = 0; // счётчик попыток угадать число
  let low = 0; // нижняя граница диапазона разбиения
  let middle = 0; // середина разбиения диапазона
  let high = 100; // верхняя граница разбиения диапазона
  let condition = ""; // отклик пользователя =, <, > на предложенный вариант числа, пока что просто пустая строка

  while (low <= high) {
    middle = Math.trunc((low + high) / 2);
    condition = prompt(
      `Вы загадали число ${middle}? Введите без кавычек "=", если это так. В противном случае, если искомое число меньше, введите "<", либо же ">", если оно больше. Опять же, без кавычек.`
    );
    // это был отклик пользователя

    if (condition != "=" && condition != "<" && condition != ">") {
      alert(
        "Вы вводите посторонние символы, я вас не понимаю! Будьте внимательнее!"
      );
      continue;
      // здесь исключаем ввод опечаток
    }
    if (
      (condition != "=" && middle == N) ||
      (condition == "<" && middle < N) ||
      (condition == ">" && middle > N) ||
      (condition == "=" && middle != N)
    ) {
      alert(
        `Кто-то мухлюет! Знак "${condition}" здесь совсем неуместен! Попробуйте снова!`
      );
      continue;
    } // здесь исключаем ложь в ответах
    if (condition == ">") {
      low = middle + 1;
    } else if (condition == "<") {
      high = middle - 1;
    } else {
      low = high + 1;
    }
    counter++;
  }
  alert(
    `Итак, за ${counter} попыток бинарным поиском мы установили, что вы загадали число ${middle}!`
  );
}
task_10();

function task_9() {
  // Задание 9: Вывести таблицу умножения для всех чисел от 2 до 9. Каждое число необходимо умножить на числа от 1 до 10.

  alert(
    "Задание 9: Вывести таблицу умножения для всех чисел от 2 до 9. Каждое число необходимо умножить на числа от 1 до 10."
  );
  let table = "";
  for (let i = 2; i <= 9; i++) {
    for (let j = 1; j <= 10; j++) {
      table += `${i} x ${j} = ` + i * j + ", ";
    }
  }
  alert(table);
}
task_9();

function task_8() {
  // Задание 8: Зациклить вывод дней недели таким образом:"День недели. Хотите увидеть следующий день?"
  // и так до до тех пор, пока пользователь нажимает ОК.

  alert(
    'Задание 8: Зациклить вывод дней недели таким образом:"День недели. Хотите увидеть следующий день?" и так до до тех пор, пока пользователь нажимает ОК.'
  );
  let arr_Week = [
    "Понедельник",
    "Вторник",
    "Среда",
    "Четверг",
    "Пятница",
    "Суббота",
    "Воскресенье",
  ];
  let i = 0;
  let stop = true;
  while (stop == true) {
    stop = confirm(`${arr_Week[i]}. Хотите увидеть следующий день недели?`);
    i++;
    if (i > 6) {
      i = 0;
    }
  }
  alert("Вывод дней недели окончен!");
}
task_8();

function task_7() {
  // Задание 7_1: Запросить у пользователя число и на сколько цифр его сдвинуть. Сдвинуть цифры числа и вывести
  // результат (если число 123456 сдвинуть на 2 цифры, то получится 345612).

  alert(
    "Задание 7_1: Запросить у пользователя число и на сколько цифр его сдвинуть. Сдвинуть цифры числа и вывести результат (если число 123456 сдвинуть на 2 цифры, то получится 345612)."
  );
  let base_number = prompt("Введите число, которое будем трансформировать: ");
  let jump = Math.abs(
    Math.trunc(
      +prompt("Введите, на сколько позиций вы хотите произвести сдвиг: ")
    )
  );
  let arr = base_number.split("");
  jump = jump % arr.length; //если пользователь указал при сдвиге число больше длины строки
  let leftJump_L = arr.slice(0, jump); //новая строка при сдвиге влево (левая половинка начальной, которая уедет в конец новой строки)
  let leftJump_R = arr.slice(jump, arr.length); //новая строка при сдвиге влево (правая половинка начальной, которая уедет в начало новой строки)
  alert(
    `Сдвиг влево "${base_number}" на ${jump} позиций:  ` +
      leftJump_R.concat(leftJump_L).join("")
  ); //объединяем 2 половины
  let rightJump_L = arr.slice(0, arr.length - jump); //новая строка при сдвиге вправо (левая половинка начальной, которая уедет в конец новой строки)
  let rightJump_R = arr.slice(arr.length - jump, arr.length); //новая строка при сдвиге вправо (правая половинка начальной, которая уедет в начало новой строки)
  alert(
    `Сдвиг вправо "${base_number}" на ${jump} позиций:  ` +
      rightJump_R.concat(rightJump_L).join("")
  ); //объединяем 2 половины
}
task_7();

function task_7_2() {
  // Запросить у пользователя число и на сколько цифр его сдвинуть. Сдвинуть цифры числа и вывести
  // результат (если число 123456 сдвинуть на 2 цифры, то получится 345612).
  // Вариант 2: решим через циклы, а не массивы

  alert(
    "Задание 7_2: ВТОРОЙ ВАРИАНТ РЕШЕНИЯ ЗАДАЧИ МЕТОДОМ ЦИКЛОВ. Запросить у пользователя число и на сколько цифр его сдвинуть. Сдвинуть цифры числа и вывести результат (если число 123456 сдвинуть на 2 цифры, то получится 345612)."
  );
  let base_number = Math.abs(
    Math.trunc(+prompt("Введите число, которое будем трансформировать: "))
  );
  let jump = Math.abs(
    Math.trunc(
      +prompt("Введите, на сколько позиций вы хотите произвести сдвиг: ")
    )
  );
  let array = [];
  let new_base_number = base_number;
  while (base_number > 0) {
    array.unshift(base_number % 10);
    base_number = Math.trunc(base_number / 10);
  } // в этом цикле мы разбили число по разрядам, каждую цифру разряда числа вписали в массив
  let new_jump = jump;
  jump = jump % array.length; //если пользователь указал при сдвиге число больше длины строки
  // с данного места приступаем к работе со сдвигом
  let arrJumpLeft_L = [];
  let arrJumpLeft_R = [];
  let arrJumpRight_L = [];
  let arrJumpRight_R = [];
  for (let i = 0; i < array.length; i++) {
    if (i < jump) {
      arrJumpLeft_L[i] = array[i];
    } else {
      arrJumpLeft_R[i] = array[i];
    }
    if (i < array.length - jump) {
      arrJumpRight_L[i] = array[i];
    } else {
      arrJumpRight_R[i] = array[i];
    }
  }
  alert(
    `Сдвиг вправо "${new_base_number}" на ${new_jump} позиции: ` +
      arrJumpRight_R.concat(arrJumpRight_L).join("")
  ); //объединяем 2 половины
  alert(
    `Сдвиг влево "${new_base_number}" на ${new_jump} позиции: ` +
      arrJumpLeft_R.concat(arrJumpLeft_L).join("")
  ); //объединяем 2 половины
}
task_7_2();

function task_6() {
  // Зациклить калькулятор. Запросить у пользователя 2 числа и знак, решить пример, вывести результат и спросить,
  //хочет ли он решить еще один пример. И так до тех пор, пока пользователь не откажется.

  alert(
    "Задание 6: Зациклить калькулятор. Запросить у пользователя 2 числа и знак, решить пример, вывести результат и спросить, хочет ли он решить еще один пример. И так до тех пор, пока пользователь не откажется."
  );
  let numberA = 0;
  let numberB = 0;
  let result = true;
  let action_sign = "";
  do {
    numberA = +prompt("Введите первое число: ");
    numberB = +prompt("Введите второе число: ");
    action_sign = prompt("Введите знак операции (*, /, + либо -): ");
    switch (action_sign) {
      case "+":
        alert(
          `${numberA} ${action_sign} ${numberB} = ${numberA + numberB}`
        );
        break;
      case "-":
        alert(
          `${numberA} ${action_sign} ${numberB} = ${numberA - numberB}`
        );
        break;
      case "*":
        alert(
          `${numberA} ${action_sign} ${numberB} = ${numberA * numberB}`
        );
        break;
      case "/":
        alert(
          `${numberA} ${action_sign} ${numberB} = ${numberA / numberB}`
        );
        break;
      default:
        alert(`Вы не ввели знак математической операции!`);
        break;
    }
    result = confirm("Хотите выполнить еще одну математическую операцию?");
  } while (result == true);
}
task_6();

function task_5() {
  // Задание 5: Запросить у пользователя 10 чисел и подсчитать, сколько он ввел положительных,
  // отрицательных и нулей. При этом также подсчитать, сколько четных и нечетных. Вывести
  // статистику на экран. Учтите, что достаточно одной переменной (не 10) для ввода
  // чисел пользователем.

  alert(
    "Задание 5: Запросить у пользователя 10 чисел и подсчитать, сколько он ввел положительных, отрицательных и нулей. При этом также подсчитать, сколько четных и нечетных. Вывести статистику на экран. Учтите, что достаточно одной переменной (не 10) для ввода чисел пользователем."
  );
  let n = 0;
  let positive_number = 0;
  let negative_number = 0;
  let null_number = 0;
  let even_number = 0;
  let odd_number = 0;
  for (let i = 0; i < 10; i++) {
    n = +prompt("Введите число: ");
    if (n > 0) {
      positive_number += 1;
    } else if (n < 0) {
      negative_number += 1;
    } else {
      null_number += 1;
    }
    !(n % 2) ? (even_number += 1) : (odd_number += 1);
  }
  alert(
    `Из 10 введеных вами чисел ${positive_number} положительных, ${negative_number} отрицательных, ${null_number} равных нулю, ${even_number} четных и ${odd_number} нечетных.`
  );
}
task_5();

function task_4() {
  // Задание 4: Определить количество чисел в введенном числе.
  alert("Задание 4: Определить количество чисел в введенном числе.");
  let n = Math.abs(+prompt("Введите число: "));
  let counter = 0;
  while (n > 0) {
    n = Math.trunc(n / 10);
    counter++;
  }
  alert(`В введенном вами числе (в его целой части) ${counter} цифр.`);
}
task_4();

function task_3() {
  // Задание 3: Запросить у пользователя число и вывести все делители этого числа.
  alert(
    "Задание 3: Запросить у пользователя число и вывести все делители этого числа."
  );
  let n = +prompt("Введите число: ");
  let new_n = Math.abs(n);
  let divisors = "";
  let i = 1;
  do {
    if (new_n % i == 0) {
      divisors += i + ",";
    }
    i++;
  } while (i <= new_n);
  alert(`У числа ${n} следующие делители: ${divisors}`);
}
task_3();

function task_2() {
  // Задание 2: Запросить у пользователя 2 числа и найти только наибольший общий делитель.
  alert(
    "Задание 2: Запросить у пользователя число и вывести все делители этого числа."
  );
  let n = +prompt("Введите первое число: ");
  let m = +prompt("Введите второе число: ");
  let new_n = Math.abs(n);
  let new_m = Math.abs(m);
  let max_divisor = 1;
  let i = 1;
  while (i <= new_n && i <= new_m) {
    if (new_n % i == 0 && new_m % i == 0) {
      max_divisor = i;
    }
    i++;
  }
  alert(`У чисел ${n} и ${m} наибольший общий делитель: ${max_divisor}`);
}
task_2();

function task_1() {
  // Задание 1: Подсчитать сумму всех чисел в заданном пользователем диапазоне.
  alert(
    "Задание 1: Подсчитать сумму всех чисел в заданном пользователем диапазоне."
  );
  let a = Math.trunc(
    +prompt("Задайте целое число, которое будет началом диапазона: ")
  );
  let a1 = a;
  let b;
  do {
    b = Math.trunc(
      +prompt("Задайте целое число, которое будет концом диапазона: ")
    );
  } while (a >= b);
  let summa = 0;
  while (a <= b) {
    summa += a;
    a++;
  }
  alert(`В диапазоне от ${a1} до ${b} включительно сумма всех чисел составляет: ${summa}.`);
}
task_1();
================================================================================================================

let newListArr = {
  name: "Cherry",
    amount: 40,
    purchased: "no",
    
      name: "Apple",
      amount: 6,
      purchased: "no",
    
}

function addNewList (newProd) {
  const prod = listShopping.find(list => list.name === newProd.name);

  if(prod) {
    prod.amount += newProd.amount
  }else {
    return listShopping.push(newProd)
  }
}

addNewList(newListArr);

==================================================================================================================

Как оказалось, не все помнят про существование в ES6 метода find. :)

let cities = [{ id: 121, name: 'г. Урюпинск' }, { id: 122, name: 'г. Париж' }, { id: 123, name: 'г. Москва' }, { id: 124, name: 'г. Штормград' }];
let searchTerm = 'г. Москва';
let cityId = cities.find(city => city.name === searchTerm).id
console.log(cityId);
=====================================================================================================

const post = listShopping.find((post) => post.name === "Tea")
if(post) {
  post.purchased = "yes";
}
==================================================================================================

function showTime () {
  let date = new Date;
  let hours = date.getHours() < 10 ? '0'+ date.getHours() : date.getHours();
  let min = date.getMinutes() < 10 ? "0" + date.getMinutes() : date.getMinutes();
  let sec = date.getSeconds() < 10 ? "0" + date.getSeconds() : date.getSeconds();

  const origin = document.querySelector(".original-time");
  origin.innerHTML = `<h2 class="time">${hours}:${min}:${sec}</h2>
    <h2 class="title">Original time</h2>`
}

showTime();
=================================================================================================================

items = [
  {a: "test1", b: 200},
  {a: "test2", b: 50},
  {a: "test3", b: 700}
];

// если нужен элемент массива
let max = items.reduce((acc, curr) => acc.b > curr.b ? acc : curr);
console.log(max.b)
// если нужен индекс элемента массива
let maxIndex = items.reduce((acc, curr, i) => items[acc].b > curr.b ? acc : i, 0);
console.log(maxIndex)
=================================================================================================================
//Общая сумма в чеке:

const totalPrice = boughtCheck.reduce((total, order) => {
  return total + order.price;
}, 0);
document.write(
  `<h6 style="text-align: center; font-size: 18px">Общая сумма; ${totalPrice}</h6>`
);
===============================================================================================================

const max = boughtCheck.reduce((max, currentValue) => Math.max(max, currentValue.price), -Infinity);

document.write(
  `<h6 style="text-align: center; font-size: 18px">Самое дорогое покупка в чеке; ${max.name} -${max}</h6>`
)
==========================================================================================================
let str = "Hello World!-2024"

let upper = str.match(/[A-Z]/g).length
let lower = str.match(/[a-z]/g).length
let allLetters = upper + lower;
  let nums = str.match(/[0-9]/g).length
let allSymbols = str.replace(/\s/g, '').length;

console.log("количество букв: " + allLetters);
console.log("количество цифр " + nums);
console.log("общая количество знаков в строке " + allSymbols)

let i = str.replace(/\D+/g,'').length;
console.log('Количество цифр в строке - '+i+'шт.');

===========================================================================================================

let links = document.querySelectorAll('a');

for (let link of links) {
  let href = link.getAttribute('href');
  if (!href) continue; // нет атрибута

  if (!href.includes('://')) continue; // нет протокола

  if (href.startsWith('http://internal.com')) continue; // внутренняя

  link.style.color = 'orange';
}
=================================================================================================================

Popup and modal window:

const btns = document.querySelectorAll(".btns");
const contents = document.querySelectorAll(".contents");

btns.forEach((btn) => {
  btn.addEventListener("click", () => {

    for(element of contents) {
      element.classList.remove("content--show");
    }
    document.querySelector("#" + btn.dataset.tab).classList.add("content--show");
  })
})


// popup

const tabImg = document.querySelectorAll(".tab__img");

tabImg.forEach((img) => {
  img.addEventListener("click", () => {
    const imgParent = img.parentElement;
    imgParent.nextElementSibling.classList.add("popup--show");
  })
})

const popupClose = document.querySelectorAll(".popup-close");

popupClose.forEach((close) => {
  close.addEventListener("click", () => {
    const closeParent = close.parentElement;
    closeParent.parentElement.classList.remove("popup--show");
  })
})
===========================================================================================================

/ Ссылки на внешние источники (которые начинаются с http://)
// необходимо подчеркнуть пунктиром.
// Искать такие ссылки в списке и устанавливать им дополнительные стили необходимо с помощью JS.

const link = document.querySelectorAll(".link");

for (let item of link) {
  let href = item.getAttribute('href');

  if (!href.includes('://')) continue; 
  item.style.cssText = `
 text-decoration: underline dashed;
`; 
}
==================================================================================================================

// Создать html-страницу со списком книг.
// При щелчке на элемент, цвет текста должен меняться на оранжевый. При повторном щелчке на другую книгу, предыдущей
// необходимо возвращать прежний цвет.
// Если при клике мышкой была зажата клавиша Ctrl, то элемент
// добавляется/удаляется из выделенных. Если при клике мышкой
// была зажата клавиша Shift, то к выделению добавляются все
// элементы в промежутке от предыдущего кликнутого до текущего.

let rows = document.querySelectorAll('tr');
rows.forEach((element) => {
  element.onmousedown = paint;
});

let lastRow;

function paint() {

  if (event.shiftKey) {
    if (lastRow.rowIndex < this.rowIndex) {
      for (let i = lastRow.rowIndex; i <= this.rowIndex; i++) {
        rows[i].classList.add('selected');
      }
    } else {
      for (let i = lastRow.rowIndex; i >= this.rowIndex; i--) {
        rows[i].classList.add('selected');
      }
    }
    return;
  }
  if (event.ctrlKey) {
    if (this.classList.contains('selected')) {
      this.classList.remove('selected');
      return;
    } else {
      this.classList.add('selected');
      return;
    }
  }

  document.querySelectorAll('.selected').forEach((elem) => {
    elem.classList.remove('selected');
  });
  if (!this.classList.contains('selected')) {
    this.classList.add('selected');

  }
  if (this.classList.contains('selected')) {
    lastRow = this;
    return;
  }
}
==================================================================================================================
// Создать html-страницу для отображения/редактирования текста.
// При открытии страницы текст отображается с помощью тега
// div. При нажатии Ctrl+E, вместо div появляется textarea с тем
// же текстом, который теперь можно редактировать. При нажатии
// Ctrl+S, вместо textarea появляет div с уже измененным текстом.
// Не забудьте выключить поведение по умолчанию для этих сочетаний клавиш.

const body = document.querySelector("body");

body.addEventListener("keydown", (event) => {
  const resizer = document.createElement("div");
  if ((event.code === "KeyE" || event.code === "Comma") && event.ctrlKey) {
    event.returnValue = false;
    let elem = document.querySelector(".content__textarea");
    if (event.code === "KeyE" && elem.nodeName === "DIV") {
      let newEl = document.createElement("textarea");
      newEl.setAttribute("cols", 50);
      newEl.setAttribute("rows", 20);
      newEl.className = "content__textarea";
      newEl.textContent = elem.textContent;
      elem.replaceWith(newEl);
    } else if (event.code === "Comma" && elem.nodeName === "TEXTAREA") {
      let newEl = document.createElement("div");
      newEl.className = "content__textarea";
      newEl.textContent = elem.value;
      resizer.className = "content__textarea--resizer";

      const initResize = e => {
        e.preventDefault;
        window.addEventListener("mousemove", startResize);
        window.addEventListener("mouseup", stopResize);
      };

      const startResize = e => {
        newEl.style.width = (e.clientX - newEl.offsetLeft) + "px";
      };
      const stopResize = e => {
        window.removeEventListener('mousemove', startResize);
        window.removeEventListener('mouseup', stopResize);
      };

      resizer.addEventListener("mousedown", initResize);
      newEl.append(resizer);
      elem.replaceWith(newEl);
    }
  }

});

===================================================================================================================
Написать функцию, которая принимает строку и выводит
// статистику о ней: количество букв, количество цифр и
// количество других знаков.

// let str = "Hello World!-2024"

// let upper = str.match(/[A-Z]/g).length
// let lower = str.match(/[a-z]/g).length
// let allLetters = upper + lower;
//   let nums = str.match(/[0-9]/g).length
// let allSymbols = str.replace(/\s/g, '').length;

// console.log("количество букв: " + allLetters);
// console.log("количество цифр " + nums);
// console.log("общая количество знаков в строке " + allSymbols)

// let i = str.replace(/\D+/g,'').length;
// console.log('Количество цифр в строке - '+i+'шт.');
================================================================================================================

// 4. Написать функцию, которая преобразует названия cssстилей с дефисом в название в СamelСase стиле: font-size
// в fontSize, background-color в backgroundColor, textalign в textAlign.

// function camelize(str) {
//   return str.split('-').map(
//       (word, index) => index == 0 ? word : word[0].toUpperCase() + word.slice(1)
//     )
//     .join('');
// }

// console.log(camelize("text-align"));
// console.log(camelize("font-size"));
// console.log(camelize("background-color"))
==================================================================================================================
5. Написать функцию, которая принимает словосочетание
// и превращает его в аббревиатуру.
// Например: cascading style sheets в CSS,

// function makeAbbr(words) {
//   return words
//     .split(' ')
//     .reduce((prevVal, curWord) => prevVal + (curWord ? curWord[0]: ''), '')
//     .toUpperCase()
// }

// console.log(makeAbbr("Hyper Text Markup Language"))
=============================================================================================================
Написать функцию, которая получает url и выводит подробную информацию о нем.
// Например: url “https://itstep.org/ua/about”, информация 

// function splitDomen (url) {
//   let u = new URL(url);
//   let protocol = u.protocol;
//   let domen = u.hostname;
//   let path = u.pathname;

//   alert(protocol);
//   alert(domen);
//   alert(path);
// }

// splitDomen("https://itstep.org/ua/about");
====================================================================================================================
